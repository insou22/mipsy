instructions:
  # R-Type Instructions
  - name: SLL
    desc_short: Shifts the value in $Rt left by Sa logically, storing the result in $Rd
    desc_long: >
      insert long description here if you so please
    compile:
      format: [Rd, Rt, Shamt]
    runtime:
      type: R
      funct: 0x00

  - name: SRL
    desc_short: Shifts the value in $Rt right by Sa logically, storing the result in $Rd
    compile:
      format: [Rd, Rt, Shamt]
    runtime:
      type: R
      funct: 0x02

  - name: SRA
    desc_short: Shifts the value in $Rt right by Sa arithmetically, storing the result in $Rd
    compile:
      format: [Rd, Rt, Shamt]
    runtime:
      type: R
      funct: 0x03

  - name: SLLV
    desc_short: Shifts the value in $Rt left by the value in $Rs logically, storing the result in $Rd
    compile:
      format: [Rd, Rt, Rs]
    runtime:
      type: R
      funct: 0x04

  - name: SRLV
    desc_short: Shifts the value in $Rt right by the value in $Rs logically, storing the result in $Rd
    compile:
      format: [Rd, Rt, Rs]
    runtime:
      type: R
      funct: 0x06

  - name: SRAV
    desc_short: Shifts the value in $Rt right by the value in $Rs arithmetically, storing the result in $Rd
    compile:
      format: [Rd, Rt, Rs]
    runtime:
      type: R
      funct: 0x07


  - name: JR
    desc_short: Jumps to the address stored in the register $Rs
    compile:
      format: [Rs]
    runtime:
      type: R
      funct: 0x08

  - name: JALR
    desc_short: Jump-and-links to the address stored in the register $Rs
    compile:
      format: [Rs]
    runtime:
      type: R
      funct: 0x09


  - name: SYSCALL
    desc_short: Causes a system-call interrupt
    compile:
      format: []
    runtime:
      type: R
      funct: 0x0C

  - name: BREAK
    desc_short: Causes a break interrupt
    compile:
      format: []
    runtime:
      type: R
      funct: 0x0D


  - name: MFHI
    desc_short: Copies the value from the HI register to $Rd
    compile:
      format: [Rd]
    runtime:
      type: R
      funct: 0x10

  - name: MTHI
    desc_short: Copies the value from $Rs to the HI register
    compile:
      format: [Rs]
    runtime:
      type: R
      funct: 0x11

  - name: MFLO
    desc_short: Copies the value from the LO register to $Rd
    compile:
      format: [Rd]
    runtime:
      type: R
      funct: 0x12

  - name: MTLO
    desc_short: Copies the value from $Rs to the LO register
    compile:
      format: [Rs]
    runtime:
      type: R
      funct: 0x13

  - name: MULT
    desc_short: Multiplies the values in $Rs and $Rt, storing the result in the HI and LO registers
    compile:
      format: [Rs, Rt]
    runtime:
      type: R
      funct: 0x18

  - name: MULTU
    desc_short: Multiplies the values in $Rs and $Rt, storing the result in the HI and LO registers, unsigned
    compile:
      format: [Rs, Rt]
    runtime:
      type: R
      funct: 0x19

  - name: DIV
    desc_short: Divides the values in $Rs and $Rt, storing the $Rs / $Rt in HI, and $Rs % $Rt in LO
    compile:
      format: [Rs, Rt]
    runtime:
      type: R
      funct: 0x1A

  - name: DIVU
    desc_short: Divides the values in $Rs and $Rt, storing the $Rs / $Rt in HI, and $Rs % $Rt in LO, unsigned
    compile:
      format: [Rs, Rt]
    runtime:
      type: R
      funct: 0x1B


  - name: ADD
    desc_short: todo
    compile:
      format: [Rd, Rs, Rt]
    runtime:
      type: R
      funct: 0x20

  - name: ADDU
    desc_short: todo
    compile:
      format: [Rd, Rs, Rt]
    runtime:
      type: R
      funct: 0x21

  - name: SUB
    desc_short: todo
    compile:
      format: [Rd, Rs, Rt]
    runtime:
      type: R
      funct: 0x22

  - name: SUBU
    desc_short: todo
    compile:
      format: [Rd, Rs, Rt]
    runtime:
      type: R
      funct: 0x23

  - name: AND
    desc_short: todo
    compile:
      format: [Rd, Rs, Rt]
    runtime:
      type: R
      funct: 0x24

  - name: OR
    desc_short: todo
    compile:
      format: [Rd, Rs, Rt]
    runtime:
      type: R
      funct: 0x25

  - name: XOR
    desc_short: todo
    compile:
      format: [Rd, Rs, Rt]
    runtime:
      type: R
      funct: 0x26

  - name: NOR
    desc_short: todo
    compile:
      format: [Rd, Rs, Rt]
    runtime:
      type: R
      funct: 0x27


  - name: SLT
    desc_short: Set $Rd to 1 if $Rs < $Rt, otherwise set $Rd to 0, unsigned
    compile:
      format: [Rd, Rs, Rt]
    runtime:
      type: R
      funct: 0x2A

  - name: SLTU
    desc_short: Set $Rd to 1 if $Rs < $Rt, otherwise set $Rd to 0, unsigned
    compile:
      format: [Rd, Rs, Rt]
    runtime:
      type: R
      funct: 0x2B
      
  # I-Type instructions

  - name: BLTZ
    desc_short: Branch to the immediate address if the value in $Rs < 0
    compile:
      format: [Rs, I16]
      relative_label: true
    runtime:
      type: I
      opcode: 0x01
      rt: 0x00

  - name: BGEZ
    desc_short: Branch to the immediate address if the value in $Rs >= 0
    compile:
      format: [Rs, I16]
      relative_label: true
    runtime:
      type: I
      opcode: 0x01
      rt: 0x01

  - name: BEQ
    desc_short: Branch to the immediate address if the values in $Rs == $Rt
    compile:
      format: [Rs, Rt, I16]
      relative_label: true
    runtime:
      type: I
      opcode: 0x04

  - name: BNE
    desc_short: Branch to the immediate address if the values in $Rs != $Rt
    compile:
      format: [Rs, Rt, I16]
      relative_label: true
    runtime:
      type: I
      opcode: 0x05

  - name: BLEZ
    desc_short: Branch to the immediate address if the value in $Rs <= 0
    compile:
      format: [Rs, I16]
      relative_label: true
    runtime:
      type: I
      opcode: 0x06

  - name: BGTZ
    desc_short: Branch to the immediate address if the value in $Rs > 0
    compile:
      format: [Rs, I16]
      relative_label: true
    runtime:
      type: I
      opcode: 0x07


  - name: ADDI
    desc_short: Adds an immediate value to the value in $Rs, stores result in $Rt
    compile:
      format: [Rt, Rs, I16]
    runtime:
      type: I
      opcode: 0x08

  - name: ADDIU
    desc_short: Adds an immediate value to the value in $Rs, stores result in $Rt, unsigned
    compile:
      format: [Rt, Rs, I16]
    runtime:
      type: I
      opcode: 0x09


  - name: SLTI
    desc_short: Sets $Rt to 1 if the value in $Rs is less than the immediate value, otherwise sets $Rt to 0
    compile:
      format: [Rt, Rs, I16]
    runtime:
      type: I
      opcode: 0x0A

  - name: SLTIU
    desc_short: Sets $Rt to 1 if the value in $Rs is less than the immediate value, otherwise sets $Rt to 0, unsigned
    compile:
      format: [Rt, Rs, I16]
    runtime:
      type: I
      opcode: 0x0B


  - name: ANDI
    desc_short: Bitwise and of the value in $Rs and the immediate value, stores the result in $Rt
    compile:
      format: [Rt, Rs, U16]
    runtime:
      type: I
      opcode: 0x0C

  - name: ORI
    desc_short: Bitwise or of the value in $Rs and the immediate value, stores the result in $Rt
    compile:
      format: [Rt, Rs, U16]
    runtime:
      type: I
      opcode: 0x0D

  - name: XORI
    desc_short: Bitwise xor of the value in $Rs and the immediate value, stores the result in $Rt
    compile:
      format: [Rt, Rs, U16]
    runtime:
      type: I
      opcode: 0x0E

  - name: LUI
    desc_short: Load the immediate value into the upper 16 bits of $Rt
    compile:
      format: [Rt, U16]
    runtime:
      type: I
      opcode: 0x0F


  - name: LB
    desc_short: Load one byte at the immediate address + $Rs into $Rt
    compile:
      format: [Rt, OffRs]
    runtime:
      type: I
      opcode: 0x20

  - name: LH
    desc_short: Load two bytes at the immediate address + $Rs into $Rt
    compile:
      format: [Rt, OffRs]
    runtime:
      type: I
      opcode: 0x21

  - name: LW
    desc_short: Load four bytes at the immediate address + $Rs into $Rt
    compile:
      format: [Rt, OffRs]
    runtime:
      type: I
      opcode: 0x23

  - name: LBU
    desc_short: Load one byte at the immediate address + $Rs into $Rt, don't sign extend
    compile:
      format: [Rt, OffRs]
    runtime:
      type: I
      opcode: 0x24

  - name: LHU
    desc_short: Load two bytes at the immediate address + $Rs into $Rt, don't sign extend
    compile:
      format: [Rt, OffRs]
    runtime:
      type: I
      opcode: 0x25

  - name: SB
    desc_short: Store one byte from $Rt into the immediate address + $Rs
    compile:
      format: [Rt, OffRs]
    runtime:
      type: I
      opcode: 0x28

  - name: SH
    desc_short: Store two bytes from $Rt into the immediate address + $Rs
    compile:
      format: [Rt, OffRs]
    runtime:
      type: I
      opcode: 0x29

  - name: SW
    desc_short: Store four bytes from $Rt into the immediate address + $Rs
    compile:
      format: [Rt, OffRs]
    runtime:
      type: I
      opcode: 0x2B

  - name: LWC1
    desc_short: Load a word from the immediate address + $Rs into $Rt (floating point register) 
    compile:
      format: [Rt, OffRs]
    runtime:
      type: I
      opcode: 0x31

  - name: SWC1
    desc_short: Store a word from $Rt (floating point register) into the immediate address + $Rs 
    compile:
      format: [Rt, OffRs]
    runtime:
      type: I
      opcode: 0x39

  # J-Type Instructions
  - name: J
    desc_short: Jump to the immediate address 
    compile:
      format: [J]
    runtime:
      type: J
      opcode: 0x02

  - name: JAL
    desc_short: Jump-and-link to the immediate address 
    compile:
      format: [J]
    runtime:
      type: J
      opcode: 0x03


pseudoinstructions:
  - name: NOP
    desc_short: No-Operation - doesn't do anything
    compile:
      format: []
    expand:
      - inst: SLL
        data: [$0, $0, 0]

  - name: MOVE
    desc_short: Copy the value from $Rs into $Rd
    compile:
      format: [Rd, Rs]
    expand:
      - inst: ADDU
        data: [$Rd, $0, $Rs]

  - name: B
    desc_short: Branch unconditionally
    compile:
      format: [I16]
      relative_label: true
    expand:
      - inst: BGEZ
        data: [$0, $I16]

  - name: BEQ
    desc_short: Branch if $Rs == Im1
    compile:
      format: [Rs, I16, I16]
      relative_label: true
    expand:
      - inst: ADDI
        data: [$At, $0, $I16#1]
      - inst: BEQ
        data: [$Rs, $At, $I16#2]

  - name: BEQ
    desc_short: Branch if $Rs == Im1
    compile:
      format: [Rs, I32, I16]
      relative_label: true
    expand:
      - inst: LUI
        data: [$At, $I32uHi]
      - inst: ORI
        data: [$At, $At, $I32uLo]
      - inst: BEQ
        data: [$Rs, $At, $I16]

  - name: BNE
    desc_short: Branch if $Rs != Im1
    compile:
      format: [Rs, I16, I16]
      relative_label: true
    expand:
      - inst: ADDI
        data: [$At, $0, $I16#1]
      - inst: BNE
        data: [$Rs, $At, $I16#2]

  - name: BNE
    desc_short: Branch if $Rs != Im1
    compile:
      format: [Rs, I32, I16]
      relative_label: true
    expand:
      - inst: LUI
        data: [$At, $I32uHi]
      - inst: ORI
        data: [$At, $At, $I32uLo]
      - inst: BNE
        data: [$Rs, $At, $I16]

  - name: BEQZ
    desc_short: Branch if $Rs > 0
    compile:
      format: [Rs, I16]
      relative_label: true
    expand:
      - inst: BEQ
        data: [$Rs, $0, $I16]

  - name: BNEZ
    desc_short: Branch if $Rs != 0
    compile:
      format: [Rs, I16]
      relative_label: true
    expand:
      - inst: BNE
        data: [$Rs, $0, $I16]

  - name: BGE
    desc_short: Branch if $Rs >= $Rt
    compile:
      format: [Rs, Rt, I16]
      relative_label: true
    expand:
      - inst: SLT
        data: [$At, $Rs, $Rt]
      - inst: BEQ
        data: [$At, $0, $I16]

  - name: BGE
    desc_short: Branch if $Rs >= Im1
    compile:
      format: [Rs, I16, I16]
      relative_label: true
    expand:
      - inst: ADDI
        data: [$At, $0, $I16#1]
      - inst: SLT
        data: [$At, $Rs, $At]
      - inst: BEQ
        data: [$At, $0, $I16#2]

  - name: BGE
    desc_short: Branch if $Rs >= Im1
    compile:
      format: [Rs, I32, I16]
      relative_label: true
    expand:
      - inst: LUI
        data: [$At, $I32uHi]
      - inst: ORI
        data: [$At, $At, $I32uLo]
      - inst: SLT
        data: [$At, $Rs, $At]
      - inst: BEQ
        data: [$At, $0, $I16]

  - name: BGEU
    desc_short: Branch if $Rs >= $Rt unsigned
    compile:
      format: [Rs, Rt, I16]
      relative_label: true
    expand:
      - inst: SLTU
        data: [$At, $Rs, $Rt]
      - inst: BEQ
        data: [$At, $0, $I16]

  - name: BGEU
    desc_short: Branch if $Rs >= Im1
    compile:
      format: [Rs, I32, I16]
      relative_label: true
    expand:
      - inst: LUI
        data: [$At, $I32uHi]
      - inst: ORI
        data: [$At, $At, $I32uLo]
      - inst: SLTU
        data: [$At, $Rs, $At]
      - inst: BEQ
        data: [$At, $0, $I16]

  - name: BLT
    desc_short: Branch if $Rs < $Rt
    compile:
      format: [Rs, Rt, I16]
      relative_label: true
    expand:
      - inst: SLT
        data: [$At, $Rs, $Rt]
      - inst: BNE
        data: [$At, $0, $I16]

  - name: BLT
    desc_short: Branch if $Rs < Im1
    compile:
      format: [Rs, I16, I16]
      relative_label: true
    expand:
      - inst: ADDI
        data: [$At, $0, $I16#1]
      - inst: SLT
        data: [$At, $Rs, $At]
      - inst: BNE
        data: [$At, $0, $I16#2]

  - name: BLT
    desc_short: Branch if $Rs < Im1
    compile:
      format: [Rs, I32, I16]
      relative_label: true
    expand:
      - inst: LUI
        data: [$At, $I32uHi]
      - inst: ORI
        data: [$At, $At, $I32uLo]
      - inst: SLT
        data: [$At, $Rs, $At]
      - inst: BNE
        data: [$At, $0, $I16]

  - name: BLTU
    desc_short: Branch if $Rs < $Rt unsigned
    compile:
      format: [Rs, Rt, I16]
      relative_label: true
    expand:
      - inst: SLTU
        data: [$At, $Rs, $Rt]
      - inst: BNE
        data: [$At, $0, $I16]

  - name: BLTU
    desc_short: Branch if $Rs < Im1 unsigned
    compile:
      format: [Rs, I16, I16]
      relative_label: true
    expand:
      - inst: ADDI
        data: [$At, $0, $I16#1]
      - inst: SLTU
        data: [$At, $Rs, $At]
      - inst: BNE
        data: [$At, $0, $I16#2]

  - name: BLTU
    desc_short: Branch if $Rs < Im1 unsigned
    compile:
      format: [Rs, I32, I16]
      relative_label: true
    expand:
      - inst: LUI
        data: [$At, $I32uHi]
      - inst: ORI
        data: [$At, $At, $I32uLo]
      - inst: SLTU
        data: [$At, $Rs, $At]
      - inst: BNE
        data: [$At, $0, $I16]

  - name: BLE
    desc_short: Branch if $Rs <= $Rt
    compile:
      format: [Rs, Rt, I16]
      relative_label: true
    expand:
      - inst: SLT
        data: [$At, $Rt, $Rs]
      - inst: BEQ
        data: [$At, $0, $I16]

  - name: BLE
    desc_short: Branch if $Rs <= Im1
    compile:
      format: [Rs, I16, I16]
      relative_label: true
    expand:
      - inst: ADDI
        data: [$At, $0, $I16#1]
      - inst: SLT
        data: [$At, $At, $Rs]
      - inst: BEQ
        data: [$At, $0, $I16#2]

  - name: BLE
    desc_short: Branch if $Rs <= Im1
    compile:
      format: [Rs, I32, I16]
      relative_label: true
    expand:
      - inst: LUI
        data: [$At, $I32uHi]
      - inst: ORI
        data: [$At, $At, $I32uLo]
      - inst: SLT
        data: [$At, $At, $Rs]
      - inst: BEQ
        data: [$At, $0, $I16]

  - name: BLEU
    desc_short: Branch if $Rs <= $Rt
    compile:
      format: [Rs, Rt, I16]
      relative_label: true
    expand:
      - inst: SLTU
        data: [$At, $Rt, $Rs]
      - inst: BEQ
        data: [$At, $0, $I16]

  - name: BLEU
    desc_short: Branch if $Rs <= Im1
    compile:
      format: [Rs, I16, I16]
      relative_label: true
    expand:
      - inst: ADDI
        data: [$At, $0, $I16#1]
      - inst: SLTU
        data: [$At, $At, $Rs]
      - inst: BEQ
        data: [$At, $0, $I16#2]

  - name: BLEU
    desc_short: Branch if $Rs <= Im1
    compile:
      format: [Rs, I32, I16]
      relative_label: true
    expand:
      - inst: LUI
        data: [$At, $I32uHi]
      - inst: ORI
        data: [$At, $At, $I32uLo]
      - inst: SLTU
        data: [$At, $At, $Rs]
      - inst: BEQ
        data: [$At, $0, $I16]

  - name: BGT
    desc_short: Branch if $Rs > $Rt
    compile:
      format: [Rs, Rt, I16]
      relative_label: true
    expand:
      - inst: SLT
        data: [$At, $Rt, $Rs]
      - inst: BNE
        data: [$At, $0, $I16]

  - name: BGT
    desc_short: Branch if $Rs > Im1
    compile:
      format: [Rs, I16, I16]
      relative_label: true
    expand:
      - inst: ADDI
        data: [$At, $0, $I16#1]
      - inst: SLT
        data: [$At, $At, $Rs]
      - inst: BNE
        data: [$At, $0, $I16#2]

  - name: BGT
    desc_short: Branch if $Rs > Im1
    compile:
      format: [Rs, I32, I16]
      relative_label: true
    expand:
      - inst: LUI
        data: [$At, $I32uHi]
      - inst: ORI
        data: [$At, $At, $I32uLo]
      - inst: SLT
        data: [$At, $At, $Rs]
      - inst: BNE
        data: [$At, $0, $I16]

  - name: BGTU
    desc_short: Branch if $Rs > $Rt unsigned
    compile:
      format: [Rs, Rt, I16]
      relative_label: true
    expand:
      - inst: SLTU
        data: [$At, $Rt, $Rs]
      - inst: BNE
        data: [$At, $0, $I16]

  - name: BGTU
    desc_short: Branch if $Rs > Im1 unsigned
    compile:
      format: [Rs, I16, I16]
      relative_label: true
    expand:
      - inst: ADDI
        data: [$At, $0, $I16#1]
      - inst: SLTU
        data: [$At, $At, $Rs]
      - inst: BNE
        data: [$At, $0, $I16#2]

  - name: BGTU
    desc_short: Branch if $Rs > Im1 unsigned
    compile:
      format: [Rs, I32, I16]
      relative_label: true
    expand:
      - inst: LUI
        data: [$At, $I32uHi]
      - inst: ORI
        data: [$At, $At, $I32uLo]
      - inst: SLTU
        data: [$At, $At, $Rs]
      - inst: BNE
        data: [$At, $0, $I16]

  - name: NEG
    desc_short: Flip all the bits in $Rs, store result in $Rd
    compile:
      format: [Rd, Rs]
    expand:
      - inst: SUB
        data: [$Rd, $0, $Rs]

  - name: NOT
    desc_short: $Rd = ! $Rs
    compile:
      format: [Rd, Rs]
    expand:
      - inst: NOR
        data: [$Rd, $0, $Rs]

  - name: MUL
    desc_short: todo
    compile:
      format: [Rd, Rs, Rt]
    expand:
      - inst: MULT
        data: [$Rs, $Rt]
      - inst: MFLO
        data: [$Rd]

  - name: MUL
    desc_short: todo
    compile:
      format: [Rs, Rt, I16]
    expand:
      - inst: ADDI
        data: [$At, $0, $I16]
      - inst: MULT
        data: [$Rt, $At]
      - inst: MFLO
        data: [$Rs]

  - name: DIV
    desc_short: todo
    compile:
      format: [Rd, Rs, Rt]
    expand:
      - inst: DIV
        data: [$Rs, $Rt]
      - inst: MFLO
        data: [$Rd]

  - name: DIV
    desc_short: todo
    compile:
      format: [Rs, Rt, I16]
    expand:
      - inst: ADDI
        data: [$At, $0, $I16]
      - inst: DIV
        data: [$Rt, $At]
      - inst: MFLO
        data: [$Rs]

  - name: ABS
    desc_short: $Rs = |$Rt|
    compile:
      format: [Rs, Rt]
    expand:
      - inst: BGEZ
        data: [$Rt, 2]
      - inst: SUB
        data: [$Rs, $0, $Rt]

  - name: LI
    desc_short: Load the immediate value into $Rs
    compile:
      format: [Rs, U16]
    expand:
      - inst: ORI
        data: [$Rs, $0, $U16]

  - name: LI
    desc_short: Load the immediate value into $Rs
    compile:
      format: [Rs, I16]
    expand:
      - inst: ADDI
        data: [$Rs, $0, $I16]

  - name: LI
    desc_short: Load the immediate value into $Rs
    compile:
      format: [Rs, I32]
    expand:
      - inst: LUI
        data: [$Rs, $I32uHi]
      - inst: ORI
        data: [$Rs, $Rs, $I32uLo]

  - name: LI
    desc_short: Load the immediate value into $Rs
    compile:
      format: [Rs, U32]
    expand:
      - inst: LUI
        data: [$Rs, $U32uHi]
      - inst: ORI
        data: [$Rs, $Rs, $U32uLo]

  - name: LA
    desc_short: Load the immediate address into $Rs
    compile:
      format: [Rs, I32]
    expand:
      - inst: LUI
        data: [$Rs, $I32uHi]
      - inst: ORI
        data: [$Rs, $Rs, $I32uLo]

  - name: LA
    desc_short: Load the immediate address into $Rs
    compile:
      format: [Rs, U32]
    expand:
      - inst: LUI
        data: [$Rs, $U32uHi]
      - inst: ORI
        data: [$Rs, $Rs, $U32uLo]

  - name: ADD
    desc_short: todo
    compile:
      format: [Rs, Rt, I16]
    expand:
      - inst: ADDI
        data: [$Rs, $Rt, $I16]

  - name: ADDU
    desc_short: todo
    compile:
      format: [Rs, Rt, I16]
    expand:
      - inst: ADDIU
        data: [$Rs, $Rt, $I16]

  - name: ADDIU
    desc_short: todo
    compile:
      format: [Rs, I16]
    expand:
      - inst: ADDIU
        data: [$Rs, $Rs, $I16]

  - name: SUB
    desc_short: todo
    compile:
      format: [Rs, Rt, I16]
    expand:
      - inst: ADDI
        data: [$At, $0, $I16]
      - inst: SUB
        data: [$Rs, $Rt, $At]

  - name: SUBU
    desc_short: todo
    compile:
      format: [Rs, Rt, I16]
    expand:
      - inst: ADDI
        data: [$At, $0, $I16]
      - inst: SUBU
        data: [$Rs, $Rt, $At]

  - name: AND
    desc_short: todo
    compile:
      format: [Rs, Rt, I16]
    expand:
      - inst: ORI
        data: [$At, $0, $I16]
      - inst: AND
        data: [$Rs, $Rt, $At]

  - name: SEQ
    desc_short: todo
    compile:
      format: [Rd, Rs, Rt]
    expand:
      - inst: ORI
        data: [$Rd, $0, 0]
      - inst: BNE
        data: [$Rs, $Rt, 2]
      - inst: ORI
        data: [$Rd, $0, 1]

  - name: SEQ
    desc_short: todo
    compile:
      format: [Rs, Rt, I16]
    expand:
      - inst: ORI
        data: [$Rs, $0, 0]
      - inst: ADDI
        data: [$At, $0, $I16]
      - inst: BNE
        data: [$Rt, $At, 2]
      - inst: ORI
        data: [$Rs, $0, 1]

  - name: SNE
    desc_short: todo
    compile:
      format: [Rd, Rs, Rt]
    expand:
      - inst: ORI
        data: [$Rd, $0, 0]
      - inst: BEQ
        data: [$Rs, $Rt, 2]
      - inst: ORI
        data: [$Rd, $0, 1]

  - name: SNE
    desc_short: todo
    compile:
      format: [Rs, Rt, I16]
    expand:
      - inst: ORI
        data: [$Rs, $0, 0]
      - inst: ADDI
        data: [$At, $0, $I16]
      - inst: BEQ
        data: [$Rt, $At, 2]
      - inst: ORI
        data: [$Rs, $0, 1]

  - name: SGE
    desc_short: todo
    compile:
      format: [Rd, Rs, Rt]
    expand:
      - inst: SLT
        data: [$Rd, $Rt, $Rs]
      - inst: SUBU
        data: [$Rd, $0, $Rd]
      - inst: ADDIU
        data: [$Rd, $Rd, 1]

  - name: SGE
    desc_short: todo
    compile:
      format: [Rs, Rt, I16]
    expand:
      - inst: ADDI
        data: [$At, $0, $I16]
      - inst: SLTI
        data: [$Rs, $At, $Rt]
      - inst: SUBU
        data: [$Rs, $0, $Rs]
      - inst: ADDIU
        data: [$Rs, $Rs, 1]

  - name: SGT
    desc_short: todo
    compile:
      format: [Rd, Rs, Rt]
    expand:
      - inst: SLT
        data: [$Rd, $Rt, $Rs]

  - name: SGT
    desc_short: todo
    compile:
      format: [Rs, Rt, I16]
    expand:
      - inst: ADDI
        data: [$At, $0, $I16]
      - inst: SLT
        data: [$Rs, $At, $Rt]

  - name: LB
    desc_short: Load one byte at the immediate address + $Rs into $Rt
    compile:
      format: [Rt, U32]
    expand:
      - inst: LUI
        data: [$At, $U32uHi]
      - inst: ORI
        data: [$At, $At, $U32uLo]
      - inst: LB
        data: [$Rt, ($At)]

  - name: LB
    desc_short: Load one byte at the immediate address + $Rs into $Rt
    compile:
      format: [Rt, Off32Rs]
    expand:
      - inst: LUI
        data: [$At, $Off32uHi]
      - inst: ORI
        data: [$At, $At, $Off32uLo]
      - inst: ADDU
        data: [$At, $At, $Rs]
      - inst: LB
        data: [$Rt, ($At)]

  - name: LH
    desc_short: todo
    compile:
      format: [Rt, U32]
    expand:
      - inst: LUI
        data: [$At, $U32uHi]
      - inst: ORI
        data: [$At, $At, $U32uLo]
      - inst: LH
        data: [$Rt, ($At)]

  - name: LH
    desc_short: todo
    compile:
      format: [Rt, Off32Rs]
    expand:
      - inst: LUI
        data: [$At, $Off32uHi]
      - inst: ORI
        data: [$At, $At, $Off32uLo]
      - inst: ADDU
        data: [$At, $At, $Rs]
      - inst: LH
        data: [$Rt, ($At)]

  - name: LW
    desc_short: todo
    compile:
      format: [Rt, U32]
    expand:
      - inst: LUI
        data: [$At, $U32uHi]
      - inst: ORI
        data: [$At, $At, $U32uLo]
      - inst: LW
        data: [$Rt, ($At)]

  - name: LW
    desc_short: todo
    compile:
      format: [Rt, Off32Rs]
    expand:
      - inst: LUI
        data: [$At, $Off32uHi]
      - inst: ORI
        data: [$At, $At, $Off32uLo]
      - inst: ADDU
        data: [$At, $At, $Rs]
      - inst: LW
        data: [$Rt, ($At)]

  - name: LBU
    desc_short: Load one byte at the immediate address + $Rs into $Rt
    compile:
      format: [Rt, U32]
    expand:
      - inst: LUI
        data: [$At, $U32uHi]
      - inst: ORI
        data: [$At, $At, $U32uLo]
      - inst: LBU
        data: [$Rt, ($At)]

  - name: LBU
    desc_short: Load one byte at the immediate address + $Rs into $Rt
    compile:
      format: [Rt, Off32Rs]
    expand:
      - inst: LUI
        data: [$At, $Off32uHi]
      - inst: ORI
        data: [$At, $At, $Off32uLo]
      - inst: ADDU
        data: [$At, $At, $Rs]
      - inst: LBU
        data: [$Rt, ($At)]

  - name: LHU
    desc_short: todo
    compile:
      format: [Rt, U32]
    expand:
      - inst: LUI
        data: [$At, $U32uHi]
      - inst: ORI
        data: [$At, $At, $U32uLo]
      - inst: LHU
        data: [$Rt, ($At)]

  - name: LHU
    desc_short: todo
    compile:
      format: [Rt, Off32Rs]
    expand:
      - inst: LUI
        data: [$At, $Off32uHi]
      - inst: ORI
        data: [$At, $At, $Off32uLo]
      - inst: ADDU
        data: [$At, $At, $Rs]
      - inst: LHU
        data: [$Rt, ($At)]

  - name: SB
    desc_short: todo
    compile:
      format: [Rt, U32]
    expand:
      - inst: LUI
        data: [$At, $U32uHi]
      - inst: ORI
        data: [$At, $At, $U32uLo]
      - inst: SB
        data: [$Rt, ($At)]

  - name: SB
    desc_short: todo
    compile:
      format: [Rt, Off32Rs]
    expand:
      - inst: LUI
        data: [$At, $Off32uHi]
      - inst: ORI
        data: [$At, $At, $Off32uLo]
      - inst: ADDU
        data: [$At, $At, $Rs]
      - inst: SB
        data: [$Rt, ($At)]

  - name: SH
    desc_short: todo
    compile:
      format: [Rt, U32]
    expand:
      - inst: LUI
        data: [$At, $U32uHi]
      - inst: ORI
        data: [$At, $At, $U32uLo]
      - inst: SH
        data: [$Rt, ($At)]

  - name: SH
    desc_short: todo
    compile:
      format: [Rt, Off32Rs]
    expand:
      - inst: LUI
        data: [$At, $Off32uHi]
      - inst: ORI
        data: [$At, $At, $Off32uLo]
      - inst: ADDU
        data: [$At, $At, $Rs]
      - inst: SH
        data: [$Rt, ($At)]

  - name: SW
    desc_short: todo
    compile:
      format: [Rt, U32]
    expand:
      - inst: LUI
        data: [$At, $U32uHi]
      - inst: ORI
        data: [$At, $At, $U32uLo]
      - inst: SW
        data: [$Rt, ($At)]

  - name: SW
    desc_short: todo
    compile:
      format: [Rt, Off32Rs]
    expand:
      - inst: LUI
        data: [$At, $Off32uHi]
      - inst: ORI
        data: [$At, $At, $Off32uLo]
      - inst: ADDU
        data: [$At, $At, $Rs]
      - inst: SW
        data: [$Rt, ($At)]

  - name: REM
    desc_short: todo
    compile:
      format: [Rd, Rs, I16]
    expand:
      - inst: ADDI
        data: [$At, $0, $I16]
      - inst: DIV
        data: [$Rs, $At]
      - inst: MFHI
        data: [$Rd]

  - name: REM
    desc_short: todo
    compile:
      format: [Rd, Rs, I32]
    expand:
      - inst: LUI
        data: [$At, $I32uHi]
      - inst: ORI
        data: [$At, $At, $I32uLo]
      - inst: DIV
        data: [$Rs, $At]
      - inst: MFHI
        data: [$Rd]

  - name: REM
    desc_short: todo
    compile:
      format: [Rd, Rs, Rt]
    expand:
      - inst: DIV
        data: [$Rs, $Rt]
      - inst: MFHI
        data: [$Rd]

  - name: PUSH
    compile:
      format: [Rs]
    expand:
      - inst: ADDIU
        data: [$sp, $sp, -4]
      - inst: SW
        data: [$Rs, 4($sp)]
  - name: POP
    compile:
      format: [Rd]
    expand:
      - inst: LW
        data: [$Rd, 4($sp)]
      - inst: ADDIU
        data: [$sp, $sp, 4]
